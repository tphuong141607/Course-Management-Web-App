'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var CalEvent = require('./CalEvent');

var CalDate = require('caldate');
/**
 * Mapper class for mapped calenders like hijri and hebrew
 * `this.calender` needs to be set in child classes
 */


var CalEventMap =
/*#__PURE__*/
function (_CalEvent) {
  _inherits(CalEventMap, _CalEvent);

  function CalEventMap(opts) {
    var _this;

    _classCallCheck(this, CalEventMap);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalEventMap).call(this, opts));
    _this.calendar = {};
    return _this;
  }

  _createClass(CalEventMap, [{
    key: "inYear",
    value: function inYear(year) {
      if (!(this.calendar[year] && this.calendar[year + 1] && this.calendar[year - 1])) {
        return this;
      }

      for (var y = year - 1; y <= year + 1; y++) {
        // resolve date in `calendar` as gregorian date
        var firstDays = this.calendar[y][this.opts.month - 1]; // firstDays `[M, D, diffYear]`

        for (var i = 0; i < firstDays.length; i += 3) {
          if (this.opts.year) {
            var calYear = this.calendar.year + firstDays[i + 2];

            if (this.opts.year !== calYear) {
              break;
            }
          }

          var d = new CalDate({
            year: y,
            month: firstDays[i] + 1,
            day: firstDays[i + 1]
          }).setOffset(this.opts.day - 1);

          if (d.year === year) {
            this.dates.push(d);
          }
        }
      }

      return this;
    }
  }]);

  return CalEventMap;
}(CalEvent);

module.exports = CalEventMap;