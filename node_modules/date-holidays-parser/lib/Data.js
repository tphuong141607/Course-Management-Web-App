'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = {
  get: require('lodash.get'),
  merge: require('lodash.merge')
};
/**
 * Handler for holiday data provided in the Json file
 * @class
 * @param {Object} [data]
 * @param {Object|String} [country]
 * @param {String} [state]
 * @param {String} [region]
 */

var Data =
/*#__PURE__*/
function () {
  function Data(data, country, state, region) {
    _classCallCheck(this, Data);

    this.opts = Data.splitName(country, state, region) || {};
    this.data = data || {};
  }
  /**
   * get all countries from the data
   * @param {String} lang - Iso-639 shortcode
   * @return {Object} shortcode-name value pairs. E.g. `{ AT: 'Ã–sterreich', ... }`
   */


  _createClass(Data, [{
    key: "getCountries",
    value: function getCountries(lang) {
      var _this = this;

      var o = {};

      var countries = _.get(this.data, 'holidays', {});

      Object.keys(countries).forEach(function (country) {
        o[country] = _this._name(countries, country, lang, {
          country: country
        });
      });
      return o;
    }
    /**
     * get all states for a given country from the data
     * @param {String|Object} country
     * @param {String} [lang] - Iso-639 shortcode
     * @return {Object} shortcode-name value pairs. E.g. `{ b: 'Burgenland', ... }`
     */

  }, {
    key: "getStates",
    value: function getStates(country, lang) {
      var _this2 = this;

      var opts = Object.assign({}, Data.splitName(country));

      var states = _.get(this.data, ['holidays', opts.country, 'states']) || _.get(this.data, ['holidays', opts.country, 'regions']);

      if (states) {
        var o = {};
        Object.keys(states).forEach(function (state) {
          opts.state = state;
          o[state] = _this2._name(states, state, lang, opts);
        });
        return o;
      }
    }
    /**
     * get all regions for a given country/ state from the data
     * @param {String} country
     * @param {String} state
     * @param {String} [lang] - Iso-639 shortcode
     * @return {Object} shortcode-name value pairs.
     */

  }, {
    key: "getRegions",
    value: function getRegions(country, state, lang) {
      var _this3 = this;

      var opts = Object.assign({}, Data.splitName(country, state));

      var regions = _.get(this.data, ['holidays', opts.country, 'states', opts.state, 'regions']);

      if (regions) {
        var o = {};
        Object.keys(regions).forEach(function (region) {
          opts.region = region;
          o[region] = _this3._name(regions, region, lang, opts);
        });
        return o;
      }
    }
    /**
     * @private
     */

  }, {
    key: "_name",
    value: function _name(obj, key, lang, opts) {
      var names = obj[key].names;

      var _lang = lang || this.getLanguages(opts)[0] || Object.keys(names)[0];

      var mlang = Data.majorLang(_lang);
      var name = obj[key].name || names[_lang] || names[mlang] || names[Object.keys(names)[0]];
      return name;
    }
    /**
     * get languages for selected country, state, region
     * @return {Array} containing ISO 639-1 language shortcodes
     */

  }, {
    key: "getLanguages",
    value: function getLanguages(opts) {
      return this._getValue('langs', opts) || [];
    }
    /**
     * get default day off as weekday
     * @return {String} weekday of day off
     */

  }, {
    key: "getDayOff",
    value: function getDayOff() {
      return this._getValue('dayoff');
    }
    /**
     * get timezones for country, state, region
     * @return {Array} of {String}s containing the timezones
     */

  }, {
    key: "getTimezones",
    value: function getTimezones() {
      return this._getValue('zones') || [];
    }
    /**
     * get list of raw holiday rules for country/ state/ region
     * @param {Object|String} [country]
     * @param {String} [state]
     * @param {String} [region]
     * @return {Object} holidayname <-> unparsed rule or date pairs
     */

  }, {
    key: "getRules",
    value: function getRules(country, state, region) {
      var _this4 = this;

      var rules = {};
      var opts = Data.splitName(country, state, region) || this.opts;

      if (!(opts && opts.country)) {
        return rules;
      }

      country = opts.country.toUpperCase();
      state = opts.state;
      region = opts.region;

      var tmp = _.get(this.data, ['holidays', country]);

      if (tmp) {
        this._assign(rules, tmp);

        if (state && tmp.regions && (tmp = tmp.regions[state]) || state && tmp.states && (tmp = tmp.states[state])) {
          this._assign(rules, tmp);

          if (region && tmp.regions && (tmp = tmp.regions[region])) {
            this._assign(rules, tmp);
          }
        }

        Object.keys(rules).forEach(function (key) {
          // assign name references with `_name`
          var _name = rules[key]._name;

          if (_name && _this4.data.names[_name]) {
            delete rules[key]._name;
            rules[key] = _.merge({}, _this4.data.names[_name], rules[key]);
          }
        });
      }

      return rules;
    }
    /**
     * get name for substitute name
     * @return {Object} translations of substitute day names
     */

  }, {
    key: "getSubstitueNames",
    value: function getSubstitueNames() {
      return _.get(this.data, ['names', 'substitutes', 'name']);
    }
    /**
     * helper to assign objects based on properties
     * @private
     * @param {Object} out - object where obj gets assigned into
     * @param {Object} obj - input obj
     * @return {Object}
     */

  }, {
    key: "_assign",
    value: function _assign(out, obj) {
      var days = {};

      if (obj._days) {
        // resolve reference
        var path = ['holidays'].concat(obj._days, 'days');

        var ref = _.get(this.data, path);

        if (!ref) throw new Error('unknown path for _days: ' + path.join('.'));
        days = Object.assign({}, ref);
      }

      if (days || obj.days) {
        days = Object.assign(days, obj.days);
        Object.keys(days).forEach(function (p) {
          if (days[p] === false) {
            // remove rules
            if (out[p]) {
              delete out[p];
            }

            return;
          }

          out[p] = Object.assign({}, out[p], days[p]);

          if (!days[p].type) {
            out[p].type = 'public';
          }
        });
      }

      return out;
    }
    /**
     * get a object from the data tree
     * @private
     * @param {String} key - key to look at
     * @return {Object} return object
     */

  }, {
    key: "_getValue",
    value: function _getValue(key) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.opts;
      return _.get(this.data, ['holidays', opts.country, 'states', opts.state, 'regions', opts.regions, key]) || _.get(this.data, ['holidays', opts.country, 'states', opts.state, key]) || _.get(this.data, ['holidays', opts.country, key]);
    }
  }]);

  return Data;
}();

module.exports = Data; // static functions

/**
 * split country state names if they appear in concatenated format e.g. 'at.b'
 * @param {String|Object} country
 * @param {String} [state]
 * @param {String} [region]
 * @return {Object}
 */

Data.splitName = function (country, state, region) {
  if (_typeof(country) === 'object' && country.country) {
    return toUpperCase(country);
  } else if (typeof country === 'string') {
    var a = country.split(/[.-]/);
    var o = {
      country: a.shift(),
      state: a.shift() || state,
      region: a.shift() || region
    };
    return toUpperCase(o);
  }
};

Data.majorLang = function (lang) {
  return (lang || '').split(/-/)[0];
};
/**
 * @private
 */


function toUpperCase(obj) {
  ;
  ['country', 'state', 'region'].forEach(function (key) {
    if (typeof obj[key] === 'string') {
      obj[key] = obj[key].toUpperCase();
    }
  });
  return obj;
}