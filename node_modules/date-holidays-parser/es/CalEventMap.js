'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var CalEvent = require('./CalEvent');

var CalDate = require('caldate');
/**
 * Mapper class for mapped calenders like hijri and hebrew
 * `this.calender` needs to be set in child classes
 */


var CalEventMap =
/*#__PURE__*/
function (_CalEvent) {
  _inheritsLoose(CalEventMap, _CalEvent);

  function CalEventMap(opts) {
    var _this;

    _this = _CalEvent.call(this, opts) || this;
    _this.calendar = {};
    return _this;
  }

  var _proto = CalEventMap.prototype;

  _proto.inYear = function inYear(year) {
    if (!(this.calendar[year] && this.calendar[year + 1] && this.calendar[year - 1])) {
      return this;
    }

    for (var y = year - 1; y <= year + 1; y++) {
      // resolve date in `calendar` as gregorian date
      var firstDays = this.calendar[y][this.opts.month - 1]; // firstDays `[M, D, diffYear]`

      for (var i = 0; i < firstDays.length; i += 3) {
        if (this.opts.year) {
          var calYear = this.calendar.year + firstDays[i + 2];

          if (this.opts.year !== calYear) {
            break;
          }
        }

        var d = new CalDate({
          year: y,
          month: firstDays[i] + 1,
          day: firstDays[i + 1]
        }).setOffset(this.opts.day - 1);

        if (d.year === year) {
          this.dates.push(d);
        }
      }
    }

    return this;
  };

  return CalEventMap;
}(CalEvent);

module.exports = CalEventMap;