'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var solstice = require('astronomia/lib/solstice');

var julian = require('astronomia/lib/julian');

var planetpos = require('astronomia/lib/planetposition');

var earth = new planetpos.Planet(require('astronomia/data/vsop87Bearth'));

var moment = require('moment-timezone');

var CalEvent = require('./CalEvent');

var CalDate = require('caldate');

var Equinox =
/*#__PURE__*/
function (_CalEvent) {
  _inheritsLoose(Equinox, _CalEvent);

  /**
   * @param {object} [opts]
   * @param {string} opts.season - type of season (spring|summer|autumn|winter)
   * @param {number|string} opts.offset - offset in days
   */
  function Equinox(opts) {
    var _this;

    opts = opts || {};
    _this = _CalEvent.call(this, opts) || this;
    _this._season = opts.season;
    _this._timezone = opts.timezone || 'GMT';
    return _this;
  }

  var _proto = Equinox.prototype;

  _proto.inYear = function inYear(year) {
    var jde;

    switch (this._season) {
      case 'march':
        {
          jde = solstice.march2(year, earth);
          break;
        }

      case 'june':
        {
          jde = solstice.june2(year, earth);
          break;
        }

      case 'september':
        {
          jde = solstice.september2(year, earth);
          break;
        }

      case 'december':
        {
          jde = solstice.december2(year, earth);
          break;
        }
    }

    var str = new julian.Calendar().fromJDE(jde).toDate().toISOString();
    var date;

    if (/^[+-]\d{2}:\d{2}?$/.test(this._timezone)) {
      // for '+08:00' formats
      date = moment(str).utcOffset(this._timezone);
    } else {
      // for 'Asia/Shanghai' formats
      date = moment(str).tz(this._timezone); // move to timezone
    }

    var floorDate = {
      year: year,
      month: date.month() + 1,
      day: date.date()
    };
    var d = new CalDate(floorDate).setOffset(this.offset);
    this.dates.push(d);
    return this;
  };

  return Equinox;
}(CalEvent);

module.exports = Equinox;