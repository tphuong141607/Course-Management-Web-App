"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _convert = require("./convert");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var YEAR0 = 593;
var MILLISECONDS_PER_DAY = 86400000;
var monthDaysNorm = [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30];
var monthDaysLeap = [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 31, 30];

var isLeapYear = function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
};

var UTC6 = 6; // timezone offset UTC+6

var toEpoch = function toEpoch(year) {
  return Date.UTC(year, 3, 13, UTC6);
};

var CalendarBengaliRevised =
/*#__PURE__*/
function () {
  /**
   * @constructor
   * @param {Number|String} year - bengali year
   * @param {Number|String} month - (int) 1...12
   * @param {Number|String} day - 1...31
   * @return {Object} this
   */
  function CalendarBengaliRevised(year, month, day) {
    _classCallCheck(this, CalendarBengaliRevised);

    Object.assign(this, {
      year: (0, _convert.banglaToDigit)(year),
      month: (0, _convert.banglaToDigit)(month) || 1,
      day: (0, _convert.banglaToDigit)(day) || 1
    });
  }
  /**
   * convert gregorian date to bengali calendar date
   * @param {Number} year - (int) year in Gregorian Calendar
   * @param {Number} month - (int)
   * @param {Number} day - (int)
   * @return {Object} this
   */


  _createClass(CalendarBengaliRevised, [{
    key: "fromGregorian",
    value: function fromGregorian(year, month, day) {
      var monthDays = isLeapYear(year) ? monthDaysLeap : monthDaysNorm;
      var _year = year;

      if (month < 4 || month === 4 && day < 14) {
        _year -= 1;
      }

      this.year = _year - YEAR0;
      var date = Date.UTC(year, month - 1, day, UTC6);
      var days = Math.floor((date - toEpoch(_year)) / MILLISECONDS_PER_DAY);

      for (var i = 0; i < monthDays.length; i++) {
        if (days <= monthDays[i]) {
          this.month = i + 1;
          break;
        }

        days -= monthDays[i];
      }

      this.day = days;
      return this;
    }
    /**
     * convert date to bengali calendar date
     * @param {Date} date - javascript date object - uses local date
     * @return {Object} this
     */

  }, {
    key: "fromDate",
    value: function fromDate(date) {
      return this.fromGregorian(date.getFullYear(), date.getMonth() + 1, date.getDate());
    }
    /**
     * convert bengali date to gregorian date
     * @return {Object} date in gregorian (preleptic) calendar
     *   {Number} year - (int)
     *   {Number} month - (int) 1...12
     *   {Number} day - (int) 1...31
     */

  }, {
    key: "toGregorian",
    value: function toGregorian() {
      var date = this.toDate();
      return {
        year: date.getUTCFullYear(),
        month: date.getUTCMonth() + 1,
        day: date.getUTCDate()
      };
    }
    /**
     * convert bengali date to Date
     * @return {Date} javascript date object in gregorian (preleptic) calendar
     */

  }, {
    key: "toDate",
    value: function toDate() {
      var year = this.year + YEAR0;
      var epoch = toEpoch(year);

      var _year = this.month > 10 ? year + 1 : year;

      var monthDays = isLeapYear(_year) ? monthDaysLeap : monthDaysNorm;
      var days = this.day;

      for (var i = 0; i < this.month - 1; i++) {
        days += monthDays[i];
      }

      var date = new Date(days * MILLISECONDS_PER_DAY + epoch);
      return date;
    }
    /**
     * format date in bengali
     * @param {String} formatStr - string formatter
     *
     * | Input | Description  |
     * | ----- | ------------ |
     * | Y     | Year with any number of digits and sign |
     * | Q     | Season Name  |
     * | M     | Month number |
     * | MMMM  | Month name   |
     * | D     | Day of month |
     * | dddd  | Day name     |
     *
     * @return {String}
     */

  }, {
    key: "format",
    value: function format(formatStr) {
      formatStr = formatStr || 'D M, Y';

      if (/dddd/.test(formatStr)) {
        var date = this.toDate();
        formatStr = formatStr.replace(/dddd/g, (0, _convert.weekDay)(date.getUTCDay()));
      }

      return formatStr.replace(/Y/g, (0, _convert.digitToBangla)(this.year)).replace(/Q/g, (0, _convert.seasonName)(this.month)).replace(/MMMM/g, (0, _convert.monthName)(this.month)).replace(/M/g, (0, _convert.digitToBangla)(this.month)).replace(/D/g, (0, _convert.digitToBangla)(this.day));
    }
  }]);

  return CalendarBengaliRevised;
}();

exports["default"] = CalendarBengaliRevised;