function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * @copyright 2013 Sonia Keys
 * @copyright 2016 commenthol
 * @license MIT
 * @module julian
 */

/**
 * Julian: Chapter 7, Julian day.
 */
import base from './base';
import sexa from './sexagesimal';
import deltat from './deltat';
var int = Math.trunc;
/** 1582-10-05 Julian Date is 1st Gregorian Date (1582-10-15) */

export var GREGORIAN0JD = 2299160.5;
var DAYS_OF_YEAR = [0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
var SECS_OF_DAY = 86400; // 24 * 60 * 60

/**
 * Base class for CalendarJulian and CalendarGregorian
 * Respects the start of the Gregorian Calendar at `GREGORIAN0JD`
 */

export var Calendar =
/*#__PURE__*/
function () {
  /**
   * @param {number|Date} year - If `Date` is given then year, month, day is taken from that. Shortcut to `new Calendar().fromDate(date)`
   * @param {number} month
   * @param {number} day
   */
  function Calendar(year, month, day) {
    if (month === void 0) {
      month = 1;
    }

    if (day === void 0) {
      day = 1;
    }

    this.year = year;
    this.month = month;
    this.day = day;

    if (year instanceof Date) {
      this.fromDate(year);
    }
  }

  var _proto = Calendar.prototype;

  _proto.getDate = function getDate() {
    return {
      year: this.year,
      month: this.month,
      day: Math.floor(this.day)
    };
  };

  _proto.getTime = function getTime() {
    var t = new sexa.Time(this.day * SECS_OF_DAY);

    var _t$toHMS = t.toHMS(),
        neg = _t$toHMS[0],
        h = _t$toHMS[1],
        m = _t$toHMS[2],
        _s = _t$toHMS[3]; // eslint-disable-line no-unused-vars


    var _base$modf = base.modf(_s),
        s = _base$modf[0],
        ms = _base$modf[1];

    ms = Math.trunc(ms * 1000);
    return {
      hour: h % 24,
      minute: m,
      second: s,
      millisecond: ms
    };
  };

  _proto.toISOString = function toISOString() {
    var _this$getDate = this.getDate(),
        year = _this$getDate.year,
        month = _this$getDate.month,
        day = _this$getDate.day;

    var _this$getTime = this.getTime(),
        hour = _this$getTime.hour,
        minute = _this$getTime.minute,
        second = _this$getTime.second,
        millisecond = _this$getTime.millisecond;

    return pad(year, 4) + "-" + pad(month) + "-" + pad(day) + "T" + (pad(hour) + ":" + pad(minute) + ":" + pad(second) + "." + pad(millisecond, 3) + "Z");
  };

  _proto.isGregorian = function isGregorian() {
    return isCalendarGregorian(this.year, this.month, this.day);
  }
  /**
   * Note: Take care for dates < GREGORIAN0JD as `date` is always within the
   * proleptic Gregorian Calender
   * @param {Date} date - proleptic Gregorian date
   */
  ;

  _proto.fromDate = function fromDate(date) {
    this.year = date.getUTCFullYear();
    this.month = date.getUTCMonth() + 1;
    var day = date.getUTCDate();
    var hour = date.getUTCHours();
    var minute = date.getUTCMinutes();
    var second = date.getUTCSeconds();
    var ms = date.getMilliseconds();
    this.day = day + (hour + (minute + (second + ms / 1000) / 60) / 60) / 24;
    return this;
  }
  /**
   * Note: Take care for dates < GREGORIAN0JD as `date` is always within the
   * proleptic Gregorian Calender
   * @returns {Date} proleptic Gregorian date
   */
  ;

  _proto.toDate = function toDate() {
    var _base$modf2 = base.modf(this.day),
        day = _base$modf2[0],
        fhour = _base$modf2[1];

    var _base$modf3 = base.modf(fhour * 24),
        hour = _base$modf3[0],
        fminute = _base$modf3[1];

    var _base$modf4 = base.modf(fminute * 60),
        minute = _base$modf4[0],
        fsecond = _base$modf4[1];

    var _base$modf5 = base.modf(fsecond * 60),
        second = _base$modf5[0],
        fms = _base$modf5[1];

    var date = new Date(Date.UTC(this.year, this.month - 1, day, hour, minute, second, Math.round(fms * 1000)));
    date.setUTCFullYear(this.year);
    return date;
  }
  /**
   * converts a calendar date to decimal year
   * @returns {number} decimal year
   */
  ;

  _proto.toYear = function toYear() {
    var _base$modf6 = base.modf(this.day),
        d = _base$modf6[0],
        f = _base$modf6[1]; // eslint-disable-line no-unused-vars


    var n = this.dayOfYear() - 1 + f;
    var days = this.isLeapYear() ? 366 : 365;
    var decYear = this.year + n / days;
    return decYear;
  }
  /**
   * converts a decimal year to a calendar date
   * @param {number} decimal year
   */
  ;

  _proto.fromYear = function fromYear(year) {
    var _base$modf7 = base.modf(year),
        y = _base$modf7[0],
        f = _base$modf7[1];

    this.year = y;
    var days = this.isLeapYear() ? 366 : 365;
    var dayOfYear = base.round(f * days, 5);
    var m = 12;

    while (m > 0 && DAYS_OF_YEAR[m] > dayOfYear) {
      m--;
    }

    this.month = m;
    this.day = 1 + dayOfYear - DAYS_OF_YEAR[this.month];
    return this;
  };

  _proto.isLeapYear = function isLeapYear() {
    if (this.isGregorian()) {
      return LeapYearGregorian(this.year);
    } else {
      return LeapYearJulian(this.year);
    }
  };

  _proto.toJD = function toJD() {
    return CalendarToJD(this.year, this.month, this.day, !this.isGregorian());
  };

  _proto.fromJD = function fromJD(jd) {
    var isJulian = !isJDCalendarGregorian(jd);

    var _JDToCalendar = JDToCalendar(jd, isJulian),
        year = _JDToCalendar.year,
        month = _JDToCalendar.month,
        day = _JDToCalendar.day;

    this.year = year;
    this.month = month;
    this.day = day;
    return this;
  };

  _proto.fromJDE = function fromJDE(jde) {
    this.fromJD(jde);
    var dT = deltat.deltaT(this.toYear()); // in seconds

    this.day -= dT / 86400;
    return this;
  };

  _proto.toJDE = function toJDE() {
    var dT = deltat.deltaT(this.toYear()); // in seconds

    this.day += dT / 86400;
    return this.toJD();
  }
  /**
   * set date to midnight UTC
   */
  ;

  _proto.midnight = function midnight() {
    this.day = Math.floor(this.day);
    return this;
  }
  /**
   * set date to noon UTC
   */
  ;

  _proto.noon = function noon() {
    this.day = Math.floor(this.day) + 0.5;
    return this;
  }
  /**
   * @param {Boolean} td - if `true` calendar instance is in TD; date gets converted to UT
   *   true  - `UT = TD - ΔT`
   *   false - `TD = UT + ΔT`
   */
  ;

  _proto.deltaT = function deltaT(td) {
    var dT = deltat.deltaT(this.toYear()); // in seconds

    if (td) {
      this.day -= dT / 86400;
    } else {
      this.day += dT / 86400;
    }

    return this;
  };

  _proto.dayOfWeek = function dayOfWeek() {
    return DayOfWeek(this.toJD());
  };

  _proto.dayOfYear = function dayOfYear() {
    if (this.isGregorian()) {
      return DayOfYearGregorian(this.year, this.month, this.day);
    } else {
      return DayOfYearJulian(this.year, this.month, this.day);
    }
  };

  return Calendar;
}();
export var CalendarJulian =
/*#__PURE__*/
function (_Calendar) {
  _inheritsLoose(CalendarJulian, _Calendar);

  function CalendarJulian() {
    return _Calendar.apply(this, arguments) || this;
  }

  var _proto2 = CalendarJulian.prototype;

  _proto2.toJD = function toJD() {
    return CalendarJulianToJD(this.year, this.month, this.day);
  };

  _proto2.fromJD = function fromJD(jd) {
    var _JDToCalendarJulian = JDToCalendarJulian(jd),
        year = _JDToCalendarJulian.year,
        month = _JDToCalendarJulian.month,
        day = _JDToCalendarJulian.day;

    this.year = year;
    this.month = month;
    this.day = day;
    return this;
  };

  _proto2.isLeapYear = function isLeapYear() {
    return LeapYearJulian(this.year);
  };

  _proto2.dayOfYear = function dayOfYear() {
    return DayOfYearJulian(this.year, this.month, this.day);
  }
  /**
   * toGregorian converts a Julian calendar date to a year, month, and day
   * in the Gregorian calendar.
   * @returns {CalendarGregorian}
   */
  ;

  _proto2.toGregorian = function toGregorian() {
    var jd = this.toJD();
    return new CalendarGregorian().fromJD(jd);
  };

  return CalendarJulian;
}(Calendar);
export var CalendarGregorian =
/*#__PURE__*/
function (_Calendar2) {
  _inheritsLoose(CalendarGregorian, _Calendar2);

  function CalendarGregorian() {
    return _Calendar2.apply(this, arguments) || this;
  }

  var _proto3 = CalendarGregorian.prototype;

  _proto3.toJD = function toJD() {
    return CalendarGregorianToJD(this.year, this.month, this.day);
  };

  _proto3.fromJD = function fromJD(jd) {
    var _JDToCalendarGregoria = JDToCalendarGregorian(jd),
        year = _JDToCalendarGregoria.year,
        month = _JDToCalendarGregoria.month,
        day = _JDToCalendarGregoria.day;

    this.year = year;
    this.month = month;
    this.day = day;
    return this;
  };

  _proto3.isLeapYear = function isLeapYear() {
    return LeapYearGregorian(this.year);
  };

  _proto3.dayOfYear = function dayOfYear() {
    return DayOfYearGregorian(this.year, this.month, this.day);
  }
  /*
  * toJulian converts a Gregorian calendar date to a year, month, and day
  * in the Julian calendar.
  * @returns {CalendarJulian}
  */
  ;

  _proto3.toJulian = function toJulian() {
    var jd = this.toJD();
    return new CalendarJulian().fromJD(jd);
  };

  return CalendarGregorian;
}(Calendar); // -----------------------------------------------------------------------------

/**
 * base conversion from calendar date to julian day
 */

export function CalendarToJD(y, m, d, isJulian) {
  var b = 0;

  if (m < 3) {
    y--;
    m += 12;
  }

  if (!isJulian) {
    var a = base.floorDiv(y, 100);
    b = 2 - a + base.floorDiv(a, 4);
  } // (7.1) p. 61


  var jd = base.floorDiv(36525 * int(y + 4716), 100) + (base.floorDiv(306 * (m + 1), 10) + b) + d - 1524.5;
  return jd;
}
/**
 * CalendarGregorianToJD converts a Gregorian year, month, and day of month
 * to Julian day.
 *
 * Negative years are valid, back to JD 0.  The result is not valid for
 * dates before JD 0.
 * @param {number} y - year (int)
 * @param {number} m - month (int)
 * @param {number} d - day (float)
 * @returns {number} jd - Julian day (float)
 */

export function CalendarGregorianToJD(y, m, d) {
  return CalendarToJD(y, m, d, false);
}
/**
 * CalendarJulianToJD converts a Julian year, month, and day of month to Julian day.
 *
 * Negative years are valid, back to JD 0.  The result is not valid for
 * dates before JD 0.
 * @param {number} y - year (int)
 * @param {number} m - month (int)
 * @param {number} d - day (float)
 * @returns {number} jd - Julian day (float)
 */

export function CalendarJulianToJD(y, m, d) {
  return CalendarToJD(y, m, d, true);
}
/**
 * LeapYearJulian returns true if year y in the Julian calendar is a leap year.
 * @param {number} y - year (int)
 * @returns {boolean} true if leap year in Julian Calendar
 */

export function LeapYearJulian(y) {
  return y % 4 === 0;
}
/**
 * LeapYearGregorian returns true if year y in the Gregorian calendar is a leap year.
 * @param {number} y - year (int)
 * @returns {boolean} true if leap year in Gregorian Calendar
 */

export function LeapYearGregorian(y) {
  return y % 4 === 0 && y % 100 !== 0 || y % 400 === 0;
}
/**
 * JDToCalendar returns the calendar date for the given jd.
 *
 * Note that this function returns a date in either the Julian or Gregorian
 * Calendar, as appropriate.
 * @param {number} jd - Julian day (float)
 * @param {boolean} isJulian - set true for Julian Calendar, otherwise Gregorian is used
 * @returns {object} `{ (int) year, (int) month, (float) day }`
 */

export function JDToCalendar(jd, isJulian) {
  var _base$modf8 = base.modf(jd + 0.5),
      z = _base$modf8[0],
      f = _base$modf8[1];

  var a = z;

  if (!isJulian) {
    var α = base.floorDiv(z * 100 - 186721625, 3652425);
    a = z + 1 + α - base.floorDiv(α, 4);
  }

  var b = a + 1524;
  var c = base.floorDiv(b * 100 - 12210, 36525);
  var d = base.floorDiv(36525 * c, 100);
  var e = int(base.floorDiv((b - d) * 1e4, 306001)); // compute return values

  var year;
  var month;
  var day = int(b - d) - base.floorDiv(306001 * e, 1e4) + f;

  if (e === 14 || e === 15) {
    month = e - 13;
  } else {
    month = e - 1;
  }

  if (month < 3) {
    year = int(c) - 4715;
  } else {
    year = int(c) - 4716;
  }

  return {
    year: year,
    month: month,
    day: day
  };
}
/**
 * JDToCalendarGregorian returns the calendar date for the given jd in the Gregorian Calendar.
 *
 * @param {number} jd - Julian day (float)
 * @returns {object} `{ (int) year, (int) month, (float) day }`
 */

export function JDToCalendarGregorian(jd) {
  return JDToCalendar(jd, false);
}
/**
 * JDToCalendarJulian returns the calendar date for the given jd in the Julian Calendar.
 *
 * @param {number} jd - Julian day (float)
 * @returns {object} { (int) year, (int) month, (float) day }
 */

export function JDToCalendarJulian(jd) {
  return JDToCalendar(jd, true);
}
/**
 * isJDCalendarGregorian tests if Julian day `jd` falls into the Gregorian calendar
 * @param {number} jd - Julian day (float)
 * @returns {boolean} true for Gregorian, false for Julian calendar
 */

export function isJDCalendarGregorian(jd) {
  return jd >= GREGORIAN0JD;
}
/**
 * isCalendarGregorian tests if date falls into the Gregorian calendar
 * @param {number} year - julian/gregorian year
 * @param {number} [month] - month of julian/gregorian year
 * @param {number} [day] - day of julian/gregorian year
 * @returns {boolean} true for Gregorian, false for Julian calendar
 */

export function isCalendarGregorian(year, month, day) {
  if (month === void 0) {
    month = 1;
  }

  if (day === void 0) {
    day = 1;
  }

  return year > 1582 || year === 1582 && month > 10 || year === 1582 && month === 10 && day >= 15;
}
/**
 * JDToDate converts a Julian day `jd` to a Date Object (Gregorian Calendar)
 *
 * Note: Javascript uses the the ISO-8601 calendar, which is a proleptic Gregorian
 * calendar, i.e. it acts as if this calendar was always in effect, even before
 * its year of introduction in 1582. Therefore dates between 1582-10-05 and
 * 1582-10-14 exists.
 *
 * @param {number} jd - Julian day (float)
 * @returns {Date}
 */

export function JDToDate(jd) {
  return new CalendarGregorian().fromJD(jd).toDate();
}
/**
 * DateToJD converts a proleptic Gregorian Date into a Julian day `jd`
 * @param {Date} date
 * @returns {number} jd - Julian day (float)
 */

export function DateToJD(date) {
  return new CalendarGregorian().fromDate(date).toJD();
}
/**
 * JDEToDate converts a Julian ephemeris day `jde` to a Date Object (Gregorian Calendar)
 * To obtain "Universal Time" (UT) from "Dynamical Time" (TD) the correction ΔT (in seconds) gets applied
 * ```
 * UT = TD - ΔT
 * ```
 * If your use case does not require such accuracy converting `jde` using `JDToDate` is fine.
 *
 * Note: Javascript uses the the ISO-8601 calendar, which is a proleptic Gregorian
 * calendar, i.e. it acts as if this calendar was always in effect, even before
 * its year of introduction in 1582. Therefore dates between 1582-10-05 and
 * 1582-10-14 exists.
 *
 * @param {number} jde - Julian ephemeris day
 * @returns {Date} Javascript Date Object
 */

export function JDEToDate(jde) {
  return new CalendarGregorian().fromJDE(jde).toDate();
}
/**
 * DateToJDE converts a Date Object (Gregorian Calendar) to a Julian ephemeris day `jde`
 * To obtain "Dynamical Time" (TD) from "Universal Time" (UT) the correction ΔT (in seconds) gets applied
 * ```
 * TD = UT + ΔT
 * ```
 * If your use case does not require such accuracy converting `Date` using `DateToJD` is fine.
 *
 * @param {Date} date - Javascript Date Object
 * @returns {number} jde - Julian ephemeris day (float)
 */

export function DateToJDE(date) {
  return new CalendarGregorian().fromDate(date).toJDE();
}
/**
 * converts Modified Julian Day `mjd` to Julian Day `jd`
 * @param {Number} mjd - Modified Julian Day
 * @returns {Number} jd - Julian Day
 */

export function MJDToJD(mjd) {
  return mjd - base.JMod;
}
/**
 * converts Julian Day `jd` to Modified Julian Day `mjd`
 * @param {Number} jd - Julian Day
 * @returns {Number} mjd - Modified Julian Day
 */

export function JDToMJD(jd) {
  return jd + base.JMod;
}
/**
 * DayOfWeek determines the day of the week for a given JD.
 *
 * The value returned is an integer in the range 0 to 6, where 0 represents
 * Sunday.  This is the same convention followed in the time package of the
 * Javascript standard library.
 * @param {number} jd - Julian day (float)
 * @returns {number} (int) 0 == sunday; ...; 6 == saturday
 */

export function DayOfWeek(jd) {
  return int(jd + 1.5) % 7;
}
/**
 * DayOfYearGregorian computes the day number within the year of the Gregorian
 * calendar.
 * @param {number} y - year (int)
 * @param {number} m - month (int)
 * @param {number} d - day (float)
 * @returns {number} day of year
 */

export function DayOfYearGregorian(y, m, d) {
  return DayOfYear(y, m, int(d), LeapYearGregorian(y));
}
/**
 * DayOfYearJulian computes the day number within the year of the Julian
 * calendar.
 * @param {number} y - year (int)
 * @param {number} m - month (int)
 * @param {number} d - day (float)
 * @returns {number} day of year
 */

export function DayOfYearJulian(y, m, d) {
  return DayOfYear(y, m, int(d), LeapYearJulian(y));
}
/**
 * DayOfYear computes the day number within the year.
 *
 * This form of the function is not specific to the Julian or Gregorian
 * calendar, but you must tell it whether the year is a leap year.
 * @param {number} y - year (int)
 * @param {number} m - month (int)
 * @param {number} d - day (float)
 * @param {boolean} leap - set `true` if `y` is leap year
 * @returns {number} day of year
 */

export function DayOfYear(y, m, d, leap) {
  var k = 0;

  if (leap && m > 1) {
    k = 1;
  }

  return k + DAYS_OF_YEAR[m] + int(d);
}
/**
 * DayOfYearToCalendar returns the calendar month and day for a given
 * day of year and leap year status.
 * @param {number} n - day of year (int)
 * @param {boolean} leap - set `true` if `y` is leap year
 * @returns {object} `{ (int) month, (float) day }`
 */

export function DayOfYearToCalendar(n, leap) {
  var month;
  var k = 0;

  if (leap) {
    k = 1;
  }

  for (month = 1; month <= 12; month++) {
    if (k + DAYS_OF_YEAR[month] > n) {
      month = month - 1;
      break;
    }
  }

  var day = n - k - DAYS_OF_YEAR[month];
  return {
    month: month,
    day: day
  };
}
/**
 * DayOfYearToCalendarGregorian returns the calendar month and day for a given
 * day of year.
 * @param {number} year
 * @param {number} n - day of year (int)
 * @returns {CalendarGregorian} { (int) year, (int) month, (float) day }
 */

export function DayOfYearToCalendarGregorian(year, n) {
  var _DayOfYearToCalendar = DayOfYearToCalendar(n, LeapYearGregorian(year)),
      month = _DayOfYearToCalendar.month,
      day = _DayOfYearToCalendar.day;

  return new CalendarGregorian(year, month, day);
}
/**
 * DayOfYearToCalendarJulian returns the calendar month and day for a given
 * day of year.
 * @param {number} year
 * @param {number} n - day of year (int)
 * @returns {CalendarJulian} { (int) year, (int) month, (float) day }
 */

export function DayOfYearToCalendarJulian(year, n) {
  var _DayOfYearToCalendar2 = DayOfYearToCalendar(n, LeapYearJulian(year)),
      month = _DayOfYearToCalendar2.month,
      day = _DayOfYearToCalendar2.day;

  return new CalendarJulian(year, month, day);
}

function pad(num, len) {
  len = len || 2;
  var neg = num < 0 ? '-' : '';
  num = Math.abs(num);
  var padded = '0000' + num;
  return neg + padded.substr(padded.length - len, len);
}

export default {
  GREGORIAN0JD: GREGORIAN0JD,
  Calendar: Calendar,
  CalendarJulian: CalendarJulian,
  CalendarGregorian: CalendarGregorian,
  CalendarToJD: CalendarToJD,
  CalendarGregorianToJD: CalendarGregorianToJD,
  CalendarJulianToJD: CalendarJulianToJD,
  LeapYearJulian: LeapYearJulian,
  LeapYearGregorian: LeapYearGregorian,
  JDToCalendar: JDToCalendar,
  JDToCalendarGregorian: JDToCalendarGregorian,
  JDToCalendarJulian: JDToCalendarJulian,
  isJDCalendarGregorian: isJDCalendarGregorian,
  isCalendarGregorian: isCalendarGregorian,
  JDToDate: JDToDate,
  DateToJD: DateToJD,
  JDEToDate: JDEToDate,
  DateToJDE: DateToJDE,
  MJDToJD: MJDToJD,
  JDToMJD: JDToMJD,
  DayOfWeek: DayOfWeek,
  DayOfYearGregorian: DayOfYearGregorian,
  DayOfYearJulian: DayOfYearJulian,
  DayOfYear: DayOfYear,
  DayOfYearToCalendar: DayOfYearToCalendar,
  DayOfYearToCalendarGregorian: DayOfYearToCalendarGregorian,
  DayOfYearToCalendarJulian: DayOfYearToCalendarJulian
};